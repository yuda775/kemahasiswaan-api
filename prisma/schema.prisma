generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" // Sesuaikan dengan database yang digunakan
  url      = env("DATABASE_URL")
}

model Student {
  id             Int              @id @default(autoincrement())
  name           String
  npm            String           @unique
  email          String           @unique
  password       String
  advisorId      Int?
  advisor        Lecturer?        @relation(fields: [advisorId], references: [id], onDelete: SetNull)
  birthDate      String
  birthPlace     String
  gender         Gender
  address        String
  phoneNumber    String           @unique
  enrollmentYear Int        
  graduationYear Int?
  programId      Int
  program        ProgramStudy     @relation(fields: [programId], references: [id], onDelete: Restrict)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  activities     StudentActivity[]  
  lecturerMentored Lecturer[]     @relation("StudentAdvisor")
  ukms           UKM[]
  answers        QuestionnaireAnswer[]
}

model QuestionnaireSubmission {
  id          Int      @id @default(autoincrement())  
  title       String
  description String
  graduationYears String
  submissionLink    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt  
  answers     QuestionnaireAnswer[]
}  

model QuestionnaireAnswer {
  id                       Int                     @id @default(autoincrement())  
  questionnaireSubmissionId Int
  questionnaireSubmission  QuestionnaireSubmission @relation(fields: [questionnaireSubmissionId], references: [id], onDelete: Cascade)
  studentId                Int
  student                  Student                 @relation(fields: [studentId], references: [id], onDelete: Cascade)
  filePath                   String
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
}

model Lecturer {
  id         Int       @id @default(autoincrement())
  name       String
  email      String    @unique
  password   String
  employeeNumber String @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  studentsAdvised Student[] @relation("StudentAdvisor")

  Student Student[]
}

model ProgramStudy {
  id         Int      @id @default(autoincrement())
  code       String   
  name       String   
  faculty    String?
  degree     Degree   @default(S1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  students   Student[]
}

model StudentActivity {
  id                       Int              @id @default(autoincrement())
  studentId                Int
  student                  Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  academicYearId           Int
  academicYear             AcademicYear     @relation(fields: [academicYearId], references: [id], onDelete: Restrict)
  activityCategory         String
  point                    Int
  activityName             String
  activityDate             DateTime
  filePath                 String
  advisorVerification      VerificationStatus @default(PENDING)
  studentAffairVerification VerificationStatus @default(PENDING)
  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @updatedAt
  comments                 String?
}

model ActivityCategory {
  id         Int              @id @default(autoincrement())
  name       String           @unique
  points     Int
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  deletedAt  DateTime?  
}

model StudentAffairs {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  password   String  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Admin {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  password   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model AcademicYear {
  id        Int      @id @default(autoincrement())
  year      String   
  semester  Semester
  startDate DateTime @db.Date
  endDate   DateTime @db.Date
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  activities StudentActivity[]
}

model UKM {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  description String
  headId      Int?
  head        Student?       @relation(fields: [headId], references: [id], onDelete: Restrict)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt  
}

model Proposal {
  id                Int            @id @default(autoincrement())  
  title             String    
  category          ProposalCategory
  activityDate      DateTime
  status            ProposalStatus @default(PENDING)
  presentationDate  DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  comments          String?
  files             ProposalFile[]
}

model ProposalFile {
  id        Int      @id @default(autoincrement())
  name       String
  path       String
  proposalId Int
  proposal  Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)  
  createdAt DateTime @default(now())
}



enum Gender {
  MALE
  FEMALE
}

enum Degree {
  D3
  S1
  S2
  S3
}

enum VerificationStatus {
  APPROVED
  REJECTED
  PENDING
}

enum Semester {
  GANJIL
  GENAP
}

enum ProposalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ProposalCategory {
  INTERNAL
  EXTERNAL
}

enum CommenterType {
  STUDENT
  ADVISOR
  STUDENTAFFAIRS
  ADMIN
  UKMHEAD
}
